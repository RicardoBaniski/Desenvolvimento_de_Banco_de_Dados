SQL> create table teste(id number(9), nome varchar2(50), salario number(7,2));

SQL> create or replace trigger verifica_horario
  2  before insert
  3  on teste
  4  begin
  5  if to_number(to_char(SYSDATE,'hh24')) not between 9 and 18 then
  6  raise_application_error(-20000,'Insercoes somente em horario comercial.');
  7  end if;
  8  end;
  9  /

Gatilho criado.

SQL> insert into teste values(1,'Joao',1000);
insert into teste values(1,'Joao',1000)
            *
ERRO na linha 1:
ORA-20000: Insercoes somente em horario comercial. 
ORA-06512: em "SYSTEM.VERIFICA_HORARIO", line 3 
ORA-04088: erro durante a execução do gatilho 'SYSTEM.VERIFICA_HORARIO' 


SQL>  create or replace trigger verifica_horario
  2   before insert
  3   on teste
  4   begin
  5   if to_number(to_char(SYSDATE,'hh24')) not between 9 and 22 then
  6   raise_application_error(-20000,'Insercoes somente em horario comercial.');
  7   end if;
  8   end;
  9   /

Gatilho criado.

SQL>  insert into teste values(1,'Joao',1000);

1 linha criada.

SQL> create or replace trigger valida_salario
  2  before insert
  3  on teste
  4  for each row
  5  begin
  6  if :NEW.salario < 0 then
  7  raise_application_error(-20001,'Salario somente maior ou igual a 0');
  8  end if;
  9  end;
 10  /

Gatilho criado.

SQL> insert into teste values(2,'Anderson',-1000);
insert into teste values(2,'Anderson',-1000)
            *
ERRO na linha 1:
ORA-20001: Salario somente maior ou igual a 0 
ORA-06512: em "SYSTEM.VALIDA_SALARIO", line 3 
ORA-04088: erro durante a execução do gatilho 'SYSTEM.VALIDA_SALARIO' 


SQL> insert into teste values(2,'Anderson',9000);

1 linha criada.

SQL> select * from teste;

        ID NOME                                                  SALARIO        
---------- -------------------------------------------------- ----------        
         1 Joao                                                     1000        
         2 Anderson                                                 9000        



SQL> create table log_teste(log_data DATE, evento varchar2(30));

Tabela criada.

SQL> create or replace trigger auditoria_teste
  2  after insert or update or delete
  3  on teste
  4  declare
  5  log_evento log_teste.evento%TYPE;
  6  begin
  7  if inserting then
  8  log_evento := 'Inserido';
  9  elsif updating then
 10  log_evento := 'Atualizado';
 11  elsif deleting then
 12  log_evento := 'Removido';
 13  end if;
 14  insert into log_teste values(SYSDATE,log_evento);
 15  end;
 16  /

Gatilho criado.

SQL> insert into teste values(3,'Mario',2000);

1 linha criada.

SQL> select * from log_teste;

LOG_DATA EVENTO                                                                 
-------- ------------------------------                                         
26/08/19 Inserido                                                               

SQL> update teste set salario = 2500 where id = 3;

1 linha atualizada.

SQL> select * from log_teste;

LOG_DATA EVENTO                                                                 
-------- ------------------------------                                         
26/08/19 Inserido                                                               
26/08/19 Atualizado                                                             

SQL> delete from teste where id = 2;

1 linha excluída.

SQL> select * from log_teste;

LOG_DATA EVENTO                                                                 
-------- ------------------------------                                         
26/08/19 Inserido                                                               
26/08/19 Atualizado                                                             
26/08/19 Removido                                                               

SQL> select * from teste;

        ID NOME                                                  SALARIO        
---------- -------------------------------------------------- ----------        
         1 Joao                                                     1000        
         3 Mario                                                    2500        

SQL> spool of;

/* ATIVIDADE */ 

bit.ly/triggers-opet
https://drive.google.com/file/d/1LSFaHZXUTjZQzfXHO6PjrbhUseJ45eBK/view

/*
1. Alterar o trigger de log para armazenar o usuário que realizou a operação sobre a tabela e o id do registro afetado.

2. Criar um trigger que atribua o salário de um usuário de acordo com os seguintes cargos:
	Cargo1 -> 890.00
	Cargo2 -> 1350.00
	Cargo3 -> 2100.00
	Cargo4 -> 3200.00
Qualquer outro valor para cargo deve apresentar uma mensagem de erro indicando que deve ser informado um cargo válido.
*/

bit.ly/triggers-opet-solucao
https://drive.google.com/file/d/1ocbnEiLlVYT96Eto44xnw0wgdEjvK7K6/view